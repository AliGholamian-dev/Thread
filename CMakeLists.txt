cmake_minimum_required(VERSION 3.1)
project(Thread)
find_package(Threads REQUIRED)


if (CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR)
    set(THREAD_STANDALONE ON)
else()
    set(THREAD_STANDALONE OFF)
    option(BUILD_THREAD_SHARED_LIB "Build Shared Library Instead Of Static Library" OFF)
endif()

set(thread_source_dir  ${PROJECT_SOURCE_DIR}/Src)
if (THREAD_STANDALONE)
    set(thread_example_dir  ${PROJECT_SOURCE_DIR}/Example)
endif()


file(GLOB_RECURSE thread_source_files ${thread_source_dir}/*.cpp)
file(GLOB_RECURSE thread_include_files ${thread_source_dir}/*.h)
if (THREAD_STANDALONE)
    file(GLOB_RECURSE thread_example_source_files ${thread_example_dir}/*.cpp)
    file(GLOB_RECURSE thread_example_include_files ${thread_example_dir}/*.h)
endif()

file(GLOB_RECURSE thread_all_source_files_folders LIST_DIRECTORIES true ${thread_source_dir}/*)
set(thread_include_dirs "")
foreach(thread_file_or_folder ${thread_all_source_files_folders})
    if(IS_DIRECTORY ${thread_file_or_folder})
        list(APPEND thread_include_dirs ${thread_file_or_folder})
    endif()
endforeach()

if (THREAD_STANDALONE)
    file(GLOB_RECURSE thread_example_all_source_files_folders LIST_DIRECTORIES true ${thread_example_dir}/*)
    set(thread_example_include_dirs "")
    foreach(thread_example_file_or_folder ${thread_example_all_source_files_folders})
        if(IS_DIRECTORY ${thread_example_file_or_folder})
            list(APPEND thread_example_include_dirs ${thread_example_file_or_folder})
        endif()
    endforeach()
endif()

if (THREAD_STANDALONE)
    add_executable(${PROJECT_NAME} ${thread_source_files} ${thread_include_files} ${thread_example_source_files} ${thread_example_include_files})
else()
    if(${BUILD_THREAD_SHARED_LIB})
        add_library(${PROJECT_NAME} SHARED ${thread_source_files} ${thread_include_files})
    else()
        add_library(${PROJECT_NAME} STATIC ${thread_source_files} ${thread_include_files})
    endif()
endif()

set_target_properties(${PROJECT_NAME} PROPERTIES CXX_STANDARD 20 CXX_STANDARD_REQUIRED ON)
target_compile_features(${PROJECT_NAME} PRIVATE cxx_std_20)
target_link_libraries(${PROJECT_NAME} PRIVATE Threads::Threads)

if (THREAD_STANDALONE)
    target_include_directories(${PROJECT_NAME} PRIVATE ${thread_source_dir} ${thread_include_dirs} ${thread_example_dir} ${thread_example_include_dirs})
else()
    target_include_directories(${PROJECT_NAME} PUBLIC ${thread_source_dir} ${thread_include_dirs})
    source_group(TREE ${PROJECT_SOURCE_DIR} FILES ${thread_source_files} ${thread_include_files})
endif()
